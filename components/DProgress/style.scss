@import "../../styles/color";
@import "../../styles/dimension";
@import "../../styles/elevation";
@import "../../styles/position";
@import "styleVar";

@mixin progress() {
  @include progressVar;
  @include progressAnimation;
  @include index(1);

  --_pr-background: #{varColor(--_pr-palette, --opacity-container-pressed)};
  --_pr__vl-background: #{varColor(--_pr-palette)};

  animation-fill-mode: forwards;
  appearance: none;
  display: none;
  overflow: hidden;
  position: relative;
  transition-property: background-color;

  &.status-move,
  &.status-visible,
  &[value] {
    display: block;
  }
}

@mixin progressBar() {
  &::-webkit-progress-bar {
    background-color: var(--_pr-background);
  }

  &::-webkit-progress-value {
    background-color: var(--_pr__vl-background);
    transition-property: background-color;
  }

  &::-moz-progress-bar {
    background-color: var(--_pr__vl-background);
    transition-property: background-color;
  }
}

@mixin progressLinear() {
  &.type-linear {
    @include absoluteX;
    background-color: var(--_pr-background);
    height: var(--_pr-height);
    width: 100%;

    &:not(.option-bottom) {
      top: 0;
      transform-origin: top;
    }

    &.option-bottom {
      bottom: 0;
      transform-origin: bottom;
    }

    &.status-visible {
      animation-name: __animate-linear--visible;
    }

    &.status-move {
      animation-name: __animate-linear--hidden;
    }
  }
}

@mixin progressLinearIndeterminate() {
  &.type-linear:not([value]),
  &.type-linear:indeterminate {
    &::before,
    &::after {
      @include absoluteLeft;
      background-color: var(--_pr__vl-background);
      content: '';
      right: 100%;
      transition-property: background-color;
    }

    &.indeterminate-type1 {
      &::after {
        animation-duration: var(--_pr-duration);
        animation-fill-mode: forwards;
      }

      &.status-move,
      &.status-visible {
        &::after {
          animation-name: __animate-linear--type1;
        }
      }

      &.status-move {
        animation-delay: var(--transition-basic);

        &::before {
          right: 0;
          transition-property: right;
        }
      }
    }

    &.indeterminate-type2 {
      &::before {
        animation: __animate-linear--type2 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
      }

      &::after {
        animation: __animate-linear--type2__short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
        animation-delay: 1.15s;
      }
    }
  }
}

@mixin progressCircular() {
  &.type-circular {
    @include absoluteFull();
    @include squared(var(--_pr--cr-size));
    --_pr--cr-length: calc(2 * 3.1415926535 * #{dimension(5)});
    --_pr--cr-dasharray: calc(var(--_pr--cr-length) / var(--_pr__vl-max));
    margin: auto;
    max-height: 100%;
    padding: var(--_pr--cr-padding);
    transform: rotate(-90deg);

    &.status-visible {
      animation-name: __animate-circle--visible;
    }

    &.status-move {
      animation-name: __animate-circle--hidden;
    }
  }

  &__circle {
    fill: transparent;
    stroke: var(--_pr__vl-background);
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0;
    stroke-linecap: round;
    stroke-width: var(--_pr-height);
    transition-property: background-color, stroke-dasharray;
  }

  &[value] &__circle {
    stroke-dasharray: calc(var(--_pr__vl-value, 0) * var(--_pr--cr-dasharray)) var(--_pr--cr-length);
    stroke-linecap: butt;
  }
}

@mixin progressCircularIndeterminate() {
  $this: &;

  &.type-circular:not([value]).indeterminate-type1 &__circle {
    animation-duration: var(--_pr-duration);
    animation-fill-mode: forwards;
    animation-name: __animate-circle--type1;
  }

  &.type-circular:not([value]).indeterminate-type2 &__circle {
    animation: __animate-circle--type2 2s linear infinite,
    __animate-circle--type2__circle 1.5s ease-in-out infinite;
    transform-origin: center;
  }
}

@mixin progressInit() {
  @include progress;
  @include progressBar;
  @include progressLinear;
  @include progressLinearIndeterminate;
  @include progressCircular;
  @include progressCircularIndeterminate;
}
